I"¨<p>Basicamente √© uma forma de gerenciamento aut√≥m√°tica de mem√≥ria. Onde o <em>garbage</em> ou simplesmente coletor, tenta recuperar lixo, ou seja, recuperar a mem√≥ria ocupada por objetos que n√£o est√£o mais em uso pelo sistema.</p>

<p>Esse processo √© autom√°tico e invis√≠vel ao programador. O JavaScript usa o <em>garbage collection</em> (coleta de lixo) para recuperar a mem√≥ria ocupada por <em>strings</em>, <em>objects</em>, <em>arrays</em> e fun√ß√µes que n√£o est√£o mais em uso.</p>

<p>Isso √© uma vantagem ao programador que n√£o precisa se preocupar em liberar mem√≥ria.</p>

<p>Podemos destacar como caracter√≠stica fundamental de <em>garbage collection</em> que ele deve ser capaz de determinar quando √© seguro recuperar mem√≥ria. Ele nunca vai recuperar objetos que ainda est√£o em uso.</p>

<h2 id="como-√©-a-execu√ß√£o-de-fun√ß√µes-e-armazenamento-de-vari√°veis-com-javascript">Como √© a execu√ß√£o de fun√ß√µes e armazenamento de vari√°veis com JavaScript</h2>

<p>Diferentemente de outras linguagens de baixo n√≠vel, como C, por exemplo, o JavaScript n√£o possui gerenciamento de mem√≥ria primitivas.</p>

<p>Os valores do JavaScript s√£o armazenados (alocados) quando objetos, <em>strings</em>, etc., s√£o criados. E, ap√≥s seu uso, essa mem√≥ria na qual foi alocado √© liberada. Esse processo de liberar mem√≥ria do que n√£o est√° mais em uso √© o <em>garbage collection</em>, mencionado acima.</p>

<p>As aloca√ß√µes de vari√°veis no JavaScript n√£o feitas conforme elas s√£o declaras, conforme o exemplo abaixo:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">n</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span> <span class="c1">// aloca mem√≥ria para um n√∫mero  </span>
<span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">azerty</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// aloca mem√≥ria para uma string  </span>

<span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{</span>  
  <span class="na">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>  
  <span class="na">b</span><span class="p">:</span> <span class="kc">null</span>  
<span class="p">};</span> <span class="c1">// aloca mem√≥ria para um objeto e seus valores contidos  </span>

<span class="c1">// (assim como o objeto) aloca mem√≥ria para o vetor e   </span>
<span class="c1">// seus valores contidos  </span>
<span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="dl">"</span><span class="s2">abra</span><span class="dl">"</span><span class="p">];</span>  
</code></pre></div></div>

<p>Como podemos observar no exemplo acima, ele aloca na mem√≥ria conforme vamos declarando nossas vari√°veis.</p>

<p>As fun√ß√µes, tamb√©m s√£o alocadas conforme s√£o declaradas. No caso de fun√ßoes, ele aloca como um objeto que pode ser chamado.</p>

<p>Definir uma fun√ß√£o n√£o basta para execut√°-la. Definir √© simplesmente dar um nome a fun√ß√£o e especificar o que ser√° feito quando tal fun√ß√£o for chamada.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">media</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>  

<span class="c1">//ou  </span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">media</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">));</span>  
</code></pre></div></div>

<p>Podemos chamar a fun√ß√£o das duas maneiras acima. Ou tamb√©m, chamar uma fun√ß√£o dentro de outra fun√ß√£o. As fun√ß√µes s√£o objetos, e, esses objetos t√™m m√©todos.</p>

<h2 id="fontes">Fontes</h2>

<p><a href="http://docstore.mik.ua/orelly/webprog/jscript/ch04_05.htm#IXT-4-56957">Garbage Collection - Docstore - O‚ÄôReilly - JavaScript The Definitive Guide</a><br />
<a href="http://v8project.blogspot.com.br/2015/08/getting-garbage-collection-for-free.html">Getting Garbage Collection for Free</a><br />
<a href="https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Memory_Management#Garbage_collection">Garbage Collection - Mozilla Developer Network</a><br />
<a href="https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Fun%C3%A7%C3%B5es#Calling_functions">Fun√ß√µes - Mozilla Developer Network</a></p>
:ET