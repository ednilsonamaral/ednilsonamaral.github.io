I"‚<p>Ol√°! Ol√°! Ol√°! Ol√°! Como √© que voc√™ est√°?</p>

<p>Hoje, nesse pequenino artigo, iremos aprender como construir uma API com Hapi.js, um novo framework para Node.js, al√©m de utilizarmos o MongoDB como nosso banco de dados, al√©m de realizarmos o deploy no Heroku e MLab. Ent√£o, bor√° codar!</p>

<h2 id="o-que-√©-esse-hapijs">O que √© esse Hapi.js?</h2>

<p>Fazendo uso da pr√≥pria defini√ß√£o do Hapi.js, ele √©:</p>

<blockquote>
  <p>A rich framework for building applications and services</p>
</blockquote>

<p>Ou seja, √© um rico framework Node.js para criarmos aplica√ß√µes e servi√ßos! Ele √© similar ao Express.js, por√©m, um pouco mais flex√≠vel. Ele √© open source, desenvolvido por Eran Hammer, Arquiteto de Plataforma M√≥vel no Walmart e respons√°vel pela constru√ß√£o de in√∫meras APIs m√≥veis para o Walmart.</p>

<p>O Hapi.js foi desenvolvido principalmente com o objetivo e resposta para os problemas enfrentados pelos desenvolvedores que utilizavam o Express.js.</p>

<p>Se fizermos uma compara√ß√£o r√°pida entre Express.js vs Hapi.js, in√∫meros desenvolvedores afirmam que o Hapi.js √© uma escolha s√°bia. Eis os motivos:</p>

<ul>
  <li>O Hapi.js usa um mecanismo de roteamento diferente, onde podemos fazer pesquisar mais r√°idas, levando em considera√ß√£o a ordem de registro;</li>
  <li>A sua curva de aprendizado √© baix√≠ssima, comparada ao Express.js;</li>
  <li>Por√©m, ambos, Express.js e Hapi.js s√£o bons para resolvermos nossos problemas.</li>
</ul>

<p>Vai de voc√™, caro desenvolvedor, testar o Express.js e o Hapi.js, e concluir qual ser√° melhor para voc√™ e sua aplica√ß√£o!</p>

<p>Ah, a documenta√ß√£o oficial do Hapi.js possui tradu√ß√£o para o portugu√™s, <a href="https://hapijs.com/tutorials?lang=pt_BR">nesse link</a>.</p>

<h2 id="iniciando-o-projeto">Iniciando o Projeto</h2>

<p>A API que iremos construir hoje √© para um ecommerce. Iremos construir uma collection de Categorias e Produtos.</p>

<p>Supondo que j√° tenhamos criado um novo projeto com <code class="highlighter-rouge">npm init</code>, vamos instalar nossas depend√™ncias, com o comando a seguir: <code class="highlighter-rouge">npm install --save hapi mongoose nodemon moment</code>.</p>

<p>O Mongoose ser√° o respons√°vel por manipularmos nossas collections e documentos no MongoDB, enquanto o Nodemon servir√° para darmos o <em>start</em> em nosso servidor. J√° o Moment.js iremos trabalhar com as datas.</p>

<h2 id="estrutura-de-diret√≥rios-e-arquivos">Estrutura de Diret√≥rios e Arquivos</h2>

<p>Iremos desenvolver nossa aplica√ß√£o modularizada, conforme exemplo abaixo:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>| config  
...| db.js  
| helpers  
...| constants.js  
| models  
...| Categorie.js  
...| Product.js  
| routes  
...| categorie.js  
...| product.js
| app.js
</code></pre></div></div>

<h2 id="levantando-o-servidor">Levantando o servidor</h2>

<p>Primeiro de tudo, precisamos levantar o nosso servidor em Hapi.js, para isso, iremos criar um arquivo na raiz do projeto nomeado <code class="highlighter-rouge">app.js</code>. O nome desse arquivo fica a seu crit√©rio.</p>

<ol>
  <li>Importar o Hapi;</li>
  <li>Chamar uma fun√ß√£o nativa dele, o <code class="highlighter-rouge">Hapi.Server()</code>;</li>
  <li>Criar as configura√ß√µes de conex√£o do nosso servidor;</li>
  <li>Dar o <em>start</em> em nosso servidor.</li>
</ol>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Hapi</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">hapi</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">server</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Hapi</span><span class="p">.</span><span class="nx">Server</span><span class="p">()</span>

<span class="nx">server</span><span class="p">.</span><span class="nx">connection</span><span class="p">({</span>
	<span class="na">host</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">HOST</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">0.0.0.0</span><span class="dl">'</span><span class="p">,</span>
	<span class="na">port</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">,</span>
	<span class="na">routes</span><span class="p">:</span> <span class="p">{</span> <span class="na">cors</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}</span>
<span class="p">})</span>

<span class="nx">server</span><span class="p">.</span><span class="nx">start</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">throw</span> <span class="nx">err</span>
	<span class="p">}</span>

	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Servidor rodando em </span><span class="p">${</span><span class="nx">server</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">uri</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></div></div>

<p>Nas configura√ß√µes de conex√£o do nosso servidor, definimos o <em>host</em>, pegando de <code class="highlighter-rouge">process.env.HOST</code> <strong>OU</strong> <code class="highlighter-rouge">0.0.0.0</code>. Ir√° far√° com que o servidor funcione localmente, via <code class="highlighter-rouge">localhost</code>, ou ent√£o, publicado no Heroku, por exemplo. Para a porta, segue a mesma l√≥gica. J√° em <code class="highlighter-rouge">routes: { cors: true }</code> ativado o CORS em nossa API.</p>

<p>Para dar o start em nosso servidor, apenas chamamos essa fun√ß√£o <code class="highlighter-rouge">server.start()</code>. Ele j√° sabe que se houver configura√ß√µes de conex√£o, ir√° vir de <code class="highlighter-rouge">server.connection</code>, por isso √© que n√£o precisamos passar o <code class="highlighter-rouge">server.connection</code> como par√¢metro para o <code class="highlighter-rouge">server.start()</code>.</p>

<h2 id="criando-a-configura√ß√£o-do-banco-de-dados">Criando a configura√ß√£o do banco de dados</h2>

<p>Pensando em desenvolver aplica√ß√µes modularizadas, todas as configura√ß√µes necess√°rias para o servidor, iremos criar dentro da pasta <code class="highlighter-rouge">./config</code>. A configura√ß√£o de nosso banco de dados n√£o ser√° diferente, iremos criar um arquivo <code class="highlighter-rouge">./config/db.js</code>:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">mongoose</span><span class="dl">'</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">dbName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">mongodb://localhost/webschool-vuejs-ecommerce-api</span><span class="dl">'</span>

<span class="nx">Mongoose</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">dbName</span><span class="p">)</span>
<span class="nx">Mongoose</span><span class="p">.</span><span class="nb">Promise</span> <span class="o">=</span> <span class="nb">global</span><span class="p">.</span><span class="nb">Promise</span>
<span class="kd">const</span> <span class="nx">db</span> <span class="o">=</span> <span class="nx">Mongoose</span><span class="p">.</span><span class="nx">connection</span>

<span class="nx">db</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">error</span><span class="dl">'</span><span class="p">,</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">console</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Erro de conex√£o!</span><span class="dl">'</span><span class="p">))</span>

<span class="nx">db</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Conex√£o com banco de dados realizada com sucesso!</span><span class="dl">'</span><span class="p">)</span>
<span class="p">})</span>

<span class="nx">exports</span> <span class="o">=</span> <span class="nx">db</span>
</code></pre></div></div>

<p>Ao definirmos nossas configura√ß√µes de banco de dados, precisamos import√°-la em nosso <code class="highlighter-rouge">./app.js</code>:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">db</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./config/db</span><span class="dl">'</span><span class="p">)</span>
</code></pre></div></div>

<p>Antes de partirmos para a etapa de definirmos os schemas, iremos criar um <em>helper</em>, chamado de <code class="highlighter-rouge">./helpers/constants.js</code>. Nesse arquivo iremos criar algumas <strong>constantes</strong> para utilizarmos em toda a nossa API e evitarmos de repetir c√≥digo, com isso iremos facilitar a manuten√ß√£o do mesmo.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="dl">'</span><span class="s1">URI</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/api/v1</span><span class="dl">'</span>
<span class="p">}</span>
</code></pre></div></div>

<p>A primeira constante que criamos √© a URI. Nela poderemos definir parte da nossa URI, e, quando precisarmos alterar iremos fazer isso apenas nesse arquivo, economizando tempo demais de manuten√ß√£o.</p>

<p>Criado esse arquivo de helper, basta importarmos ele em nosso <code class="highlighter-rouge">./app.js</code>:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Constants</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./helpers/constants</span><span class="dl">'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="definindo-os-schemas">Definindo os schemas</h2>

<p>Agora iremos definir os nossos schemas, para as <strong>Categorias</strong> e <strong>Produtos</strong>. Notem que as nomenclaturas dos c√≥digos ser√£o realizadas em ingl√™s, pois √© uma boa pr√°tica que venho seguindo nos √∫ltimos projetos e incentivo voc√™s demais a codarem em ingl√™s. Assim, qualquer dev, no mundo todo, pode contribuir com seu c√≥digo, at√© mesmo visualiz√°-lo e/ou utiliz√°-lo em algum projeto.</p>

<p>Vamos definir nosso schema de <strong>Categorias</strong>:</p>

<p><code class="highlighter-rouge">./models/Categorie.js</code></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">mongoose</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">Schema</span> <span class="o">=</span> <span class="nx">Mongoose</span><span class="p">.</span><span class="nx">Schema</span>

<span class="kd">const</span> <span class="nx">_schema</span> <span class="o">=</span> <span class="p">{</span>
		<span class="na">name</span><span class="p">:</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="na">required</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">unique</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}</span>
	<span class="p">,</span> <span class="na">status</span><span class="p">:</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="nb">Boolean</span><span class="p">,</span> <span class="na">required</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}</span>
	<span class="p">,</span> <span class="na">created_at</span><span class="p">:</span> <span class="nb">Date</span>
	<span class="p">,</span> <span class="na">updated_at</span><span class="p">:</span> <span class="nb">Date</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">CategorieSchema</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Schema</span><span class="p">(</span><span class="nx">_schema</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">Model</span> <span class="o">=</span> <span class="nx">Mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="dl">'</span><span class="s1">Categorie</span><span class="dl">'</span><span class="p">,</span> <span class="nx">CategorieSchema</span><span class="p">)</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">Model</span>
</code></pre></div></div>

<p>Criamos nosso schema com alguns campos b√°sicos, de String e Boolean, al√©m de j√° exportamos ele como um Model do Mongoose, pronto para ser usados em nossas rotas.</p>

<p>Agora, vamos definir nosso schema de <strong>Products</strong>:</p>

<p><code class="highlighter-rouge">./models/Product.js</code></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">mongoose</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">Schema</span> <span class="o">=</span> <span class="nx">Mongoose</span><span class="p">.</span><span class="nx">Schema</span>

<span class="kd">const</span> <span class="nx">_schema</span> <span class="o">=</span> <span class="p">{</span>
		<span class="na">name</span><span class="p">:</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="na">required</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">unique</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}</span>
	<span class="p">,</span> <span class="na">id_categorie</span><span class="p">:</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="nx">Schema</span><span class="p">.</span><span class="nx">Types</span><span class="p">.</span><span class="nx">ObjectId</span><span class="p">,</span> <span class="na">required</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">ref</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Categorie</span><span class="dl">'</span> <span class="p">}</span>
	<span class="p">,</span> <span class="na">price</span><span class="p">:</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="nb">Number</span><span class="p">,</span> <span class="na">required</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}</span>
	<span class="p">,</span> <span class="na">qtd</span><span class="p">:</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="nb">Number</span><span class="p">,</span> <span class="na">min</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="na">max</span><span class="p">:</span> <span class="mi">999</span> <span class="p">}</span>
	<span class="p">,</span> <span class="na">status</span><span class="p">:</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="nb">Boolean</span><span class="p">,</span> <span class="na">required</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}</span>
	<span class="p">,</span> <span class="na">created_at</span><span class="p">:</span> <span class="nb">Date</span>
	<span class="p">,</span> <span class="na">updated_at</span><span class="p">:</span> <span class="nb">Date</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">ProductSchema</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Schema</span><span class="p">(</span><span class="nx">_schema</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">Model</span> <span class="o">=</span> <span class="nx">Mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="dl">'</span><span class="s1">Product</span><span class="dl">'</span><span class="p">,</span> <span class="nx">ProductSchema</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">Model</span>
</code></pre></div></div>

<h2 id="criando-as-rotas">Criando as rotas</h2>

<p>Definido nossos schemas e j√° os tendo exportados como Models do Mongoose, estamos prontos para prosseguirmos e criarmos as nossas rotas.</p>

<h3 id="categorias">Categorias</h3>

<p>As primeiras rotas que iremos criar s√£o as de <strong>Categorias</strong>. Primeiramente, precisamos importar as bibliotecas e servi√ßos que iremos utilizar durante a cria√ß√£o de nossas rotas.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">CONSTANTS</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../helpers/constants</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">URI</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">CONSTANTS</span><span class="p">.</span><span class="nx">URI</span><span class="p">}</span><span class="s2">/categories`</span>
<span class="kd">const</span> <span class="nx">CategorieModel</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">`../models/Categorie`</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">Moment</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">moment</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">getCurrentDateWithoutTimezone</span> <span class="o">=</span> <span class="nx">Moment</span><span class="p">().</span><span class="nx">format</span><span class="p">(</span><span class="dl">'</span><span class="s1">YYYY-MM-DDTHH:mm:ss</span><span class="dl">'</span><span class="p">)</span>
</code></pre></div></div>

<p>Importamos tamb√©m o <strong>Moment.js</strong> para tratar as nossas datas. Ent√£o, j√° deixaremos preparados a <code class="highlighter-rouge">getCurrentDateWithoutTimezone</code> que ir√° pegar a data atual, n√£o do servidor, mas sim hor√°rio local, sem timezone. Muitas APIs desenvolvidas pegam a data do servidor e isso pode ser diferente do hor√°rio da regi√£o de onde o usu√°rio est√° conectado. Isso pode trazer problemas. E, para n√£o termos complica√ß√µes e gerar in√∫meras linhas de c√≥digo para tratarmos as datas, utilizamos o <a href="">Moment.js</a> que j√° cuida disso, facilmente. Agora, com o <code class="highlighter-rouge">getCurrentDateWithoutTimezone</code> podemos automatizar os campos <code class="highlighter-rouge">created_at</code> e <code class="highlighter-rouge">updated_at</code>.</p>

<p>Todas as rotas de <strong>Categorias</strong> precisaremos export√°-las para serem acessadas de nosso <code class="highlighter-rouge">./app.js</code>, ent√£o, iremos codar as nossas rotas dentro de um <code class="highlighter-rouge">module.exports</code>, sendo um array de objetos.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">[</span>
	<span class="c1">// Get all categories</span>
	<span class="p">{</span>
		<span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">,</span>
		<span class="na">path</span><span class="p">:</span> <span class="nx">URI</span><span class="p">,</span>
		<span class="na">handler</span><span class="p">:</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">reply</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
			<span class="nx">CategorieModel</span><span class="p">.</span><span class="nx">find</span><span class="p">((</span><span class="nx">error</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
				<span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
					<span class="nx">reply</span><span class="p">({</span>
						<span class="na">error</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
						<span class="na">data</span><span class="p">:</span> <span class="nx">error</span><span class="p">,</span>
						<span class="na">statusCode</span><span class="p">:</span> <span class="mi">401</span><span class="p">,</span>
						<span class="na">statusText</span><span class="p">:</span> <span class="dl">'</span><span class="s1">NOK</span><span class="dl">'</span><span class="p">,</span>
					<span class="p">}).</span><span class="nx">code</span><span class="p">(</span><span class="mi">401</span><span class="p">)</span>
				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
					<span class="nx">reply</span><span class="p">({</span>
						<span class="na">error</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
						<span class="na">data</span><span class="p">:</span> <span class="nx">data</span><span class="p">,</span>
						<span class="na">statusCode</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
						<span class="na">statusText</span><span class="p">:</span> <span class="dl">'</span><span class="s1">OK</span><span class="dl">'</span>
					<span class="p">}).</span><span class="nx">code</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
				<span class="p">}</span>
			<span class="p">})</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">]</span>
</code></pre></div></div>

<p>O m√©todo acima √© o famoso <strong>GET</strong>, declarado em <code class="highlighter-rouge">method</code>, ir√° retornar todas as categorias cadastradas.</p>

<p>Em <code class="highlighter-rouge">path</code> definimos qual √© a URL da nossa rota. Chamamos <code class="highlighter-rouge">URI</code> pois j√° definimos a mesma l√° no inicio do arquivo, visto que iremos utilizar em todas as rotas de <strong>Categorias</strong>. E, pensando em deixar o c√≥digo mais f√°cil para manuten√ß√µes poss√≠vel, atribuir uma <code class="highlighter-rouge">const</code> para nossa <em>URI</em> √© de extrema import√¢ncia e boa pr√°tica a ser seguida.</p>

<p>J√° o <code class="highlighter-rouge">handler</code> √© o nosso m√©todo manipulador, uma fun√ß√£o que aceita dois par√¢metros, o <code class="highlighter-rouge">request</code> e <code class="highlighter-rouge">reply.</code> O par√¢metro <code class="highlighter-rouge">request</code> j√° √© conhecido por quem desenvolve APIs, ele √© um objeto com todos os detalhes referentes a solicita√ß√£o do usu√°rio, como par√¢metros, carga, informa√ß√µes de autentica√ß√£o, <em>headers</em>, etc. Podemos declarar o <code class="highlighter-rouge">request</code> em nosso <code class="highlighter-rouge">handler</code> tanto como <code class="highlighter-rouge">req</code> ou propriamente <code class="highlighter-rouge">request</code>, ambas as formas ele ir√° funcionar corretamente.</p>

<p>O par√¢metro <code class="highlighter-rouge">reply</code> √© a resposta da nossa requisi√ß√£o. Nele, podemos mostrar um JSON seguido do <code class="highlighter-rouge">statusCode</code> da requisi√ß√£o com <code class="highlighter-rouge">.code(200)</code>. Dentro da nossa fun√ß√£o do <code class="highlighter-rouge">handler</code>, fazemos um <strong>.find</strong> atrav√©s mo Mongoose em <code class="highlighter-rouge">CategorieModel</code> que √© o model da <strong>Categoria</strong>. Ent√£o, lan√ßamos uma condi√ß√£o simples, onde se houver <code class="highlighter-rouge">error</code> ele d√° como <code class="highlighter-rouge">reply</code> uma coisa, caso contr√°rio, o <code class="highlighter-rouge">reply</code> ser√° diferente. Essa condi√ß√£o iremos utilizar de forma id√™ntica nas outras rotas.</p>

<p>Ap√≥s o nosso <code class="highlighter-rouge">GET</code>, vamos criar as rotas de <code class="highlighter-rouge">POST</code>, <code class="highlighter-rouge">PUT</code> e <code class="highlighter-rouge">DELETE</code>, al√©m, √© claro, de mais um <code class="highlighter-rouge">GET</code> passando o <code class="highlighter-rouge">_id</code> como par√¢metro.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Get categorie by id</span>
<span class="p">{</span>
	<span class="nl">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">,</span>
	<span class="nx">path</span><span class="p">:</span> <span class="nx">URI</span> <span class="o">+</span> <span class="s2">`/{id}`</span><span class="p">,</span>
	<span class="nx">handler</span><span class="p">:</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">reply</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
		<span class="nx">CategorieModel</span><span class="p">.</span><span class="nx">findById</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
			<span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">reply</span><span class="p">({</span>
					<span class="na">error</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
					<span class="na">data</span><span class="p">:</span> <span class="nx">error</span><span class="p">,</span>
					<span class="na">statusCode</span><span class="p">:</span> <span class="mi">401</span><span class="p">,</span>
					<span class="na">statusText</span><span class="p">:</span> <span class="dl">'</span><span class="s1">NOK</span><span class="dl">'</span><span class="p">,</span>
				<span class="p">}).</span><span class="nx">code</span><span class="p">(</span><span class="mi">401</span><span class="p">)</span>
			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
				<span class="nx">reply</span><span class="p">({</span>
					<span class="na">error</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
					<span class="na">data</span><span class="p">:</span> <span class="nx">data</span><span class="p">,</span>
					<span class="na">statusCode</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
					<span class="na">statusText</span><span class="p">:</span> <span class="dl">'</span><span class="s1">OK</span><span class="dl">'</span>
				<span class="p">}).</span><span class="nx">code</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
			<span class="p">}</span>
		<span class="p">})</span>
	<span class="p">}</span>
<span class="p">},</span>

<span class="c1">// Create a new categorie</span>
<span class="p">{</span>
	<span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span>
	<span class="na">path</span><span class="p">:</span> <span class="nx">URI</span><span class="p">,</span>
	<span class="na">handler</span><span class="p">:</span> <span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">reply</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
		<span class="kd">const</span> <span class="nx">categorie</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CategorieModel</span><span class="p">({</span>
				<span class="na">name</span><span class="p">:</span> <span class="nx">request</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">name</span>
			<span class="p">,</span> <span class="na">status</span><span class="p">:</span> <span class="nx">request</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">status</span>
			<span class="p">,</span> <span class="na">created_at</span><span class="p">:</span> <span class="nx">getCurrentDateWithoutTimezone</span>
		<span class="p">})</span>

		<span class="nx">categorie</span><span class="p">.</span><span class="nx">save</span><span class="p">((</span><span class="nx">error</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
			<span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
				<span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">.</span><span class="nx">index</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
					<span class="nx">reply</span><span class="p">({</span>
						<span class="na">error</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
						<span class="na">data</span><span class="p">:</span> <span class="dl">'</span><span class="s1">J√° existe uma categoria registrada com esse nome!</span><span class="dl">'</span><span class="p">,</span>
						<span class="na">statusCode</span><span class="p">:</span> <span class="mi">403</span><span class="p">,</span>
						<span class="na">statusText</span><span class="p">:</span> <span class="dl">'</span><span class="s1">NOK</span><span class="dl">'</span><span class="p">,</span>
					<span class="p">}).</span><span class="nx">code</span><span class="p">(</span><span class="mi">403</span><span class="p">)</span>
				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
					<span class="nx">reply</span><span class="p">({</span>
						<span class="na">error</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
						<span class="na">data</span><span class="p">:</span> <span class="nx">error</span><span class="p">,</span>
						<span class="na">statusCode</span><span class="p">:</span> <span class="mi">401</span><span class="p">,</span>
						<span class="na">statusText</span><span class="p">:</span> <span class="dl">'</span><span class="s1">NOK</span><span class="dl">'</span><span class="p">,</span>
					<span class="p">})</span>
				<span class="p">}</span>
			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
				<span class="nx">reply</span><span class="p">({</span>
					<span class="na">error</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
					<span class="na">data</span><span class="p">:</span> <span class="nx">data</span><span class="p">,</span>
					<span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Nova categoria cadastrada com sucesso!</span><span class="dl">'</span><span class="p">,</span>
					<span class="na">statusCode</span><span class="p">:</span> <span class="mi">201</span><span class="p">,</span>
					<span class="na">statusText</span><span class="p">:</span> <span class="dl">'</span><span class="s1">OK</span><span class="dl">'</span>
				<span class="p">}).</span><span class="nx">code</span><span class="p">(</span><span class="mi">201</span><span class="p">)</span>
			<span class="p">}</span>
		<span class="p">})</span>
	<span class="p">}</span>
<span class="p">},</span>

<span class="c1">// Update a categorie by id</span>
<span class="p">{</span>
	<span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">PUT</span><span class="dl">'</span><span class="p">,</span>
	<span class="na">path</span><span class="p">:</span> <span class="nx">URI</span> <span class="o">+</span> <span class="s2">`/{id}`</span><span class="p">,</span>
	<span class="na">handler</span><span class="p">:</span> <span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">reply</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
		<span class="kd">const</span> <span class="nx">_id</span> <span class="o">=</span> <span class="p">{</span> <span class="na">_id</span><span class="p">:</span> <span class="nx">request</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span> <span class="p">}</span>

		<span class="kd">const</span> <span class="nx">categorie</span> <span class="o">=</span> <span class="p">{</span>
				<span class="na">name</span><span class="p">:</span> <span class="nx">request</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">name</span>
			<span class="p">,</span> <span class="na">status</span><span class="p">:</span> <span class="nx">request</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">status</span>
			<span class="p">,</span> <span class="na">updated_at</span><span class="p">:</span> <span class="nx">getCurrentDateWithoutTimezone</span>
		<span class="p">}</span>

		<span class="nx">CategorieModel</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">_id</span><span class="p">,</span> <span class="nx">categorie</span><span class="p">,</span> <span class="p">{</span> <span class="na">multi</span><span class="p">:</span> <span class="kc">false</span> <span class="p">},</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
			<span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">reply</span><span class="p">({</span>
					<span class="na">error</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
					<span class="na">data</span><span class="p">:</span> <span class="nx">error</span><span class="p">,</span>
					<span class="na">statusCode</span><span class="p">:</span> <span class="mi">401</span><span class="p">,</span>
					<span class="na">statusText</span><span class="p">:</span> <span class="dl">'</span><span class="s1">NOK</span><span class="dl">'</span><span class="p">,</span>
				<span class="p">}).</span><span class="nx">code</span><span class="p">(</span><span class="mi">401</span><span class="p">)</span>
			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
				<span class="nx">reply</span><span class="p">({</span>
					<span class="na">error</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
					<span class="na">data</span><span class="p">:</span> <span class="nx">data</span><span class="p">,</span>
					<span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Categoria editada com sucesso!</span><span class="dl">'</span><span class="p">,</span>
					<span class="na">statusCode</span><span class="p">:</span> <span class="mi">204</span><span class="p">,</span>
					<span class="na">statusText</span><span class="p">:</span> <span class="dl">'</span><span class="s1">OK</span><span class="dl">'</span>
				<span class="p">}).</span><span class="nx">code</span><span class="p">(</span><span class="mi">204</span><span class="p">)</span>
			<span class="p">}</span>
		<span class="p">})</span>
	<span class="p">}</span>
<span class="p">},</span>

<span class="c1">// Delete a categorie by id</span>
<span class="p">{</span>
	<span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">DELETE</span><span class="dl">'</span><span class="p">,</span>
	<span class="na">path</span><span class="p">:</span> <span class="nx">URI</span> <span class="o">+</span> <span class="s2">`/{id}`</span><span class="p">,</span>
	<span class="na">handler</span><span class="p">:</span> <span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">reply</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
		<span class="kd">const</span> <span class="nx">_id</span> <span class="o">=</span> <span class="p">{</span> <span class="na">_id</span><span class="p">:</span> <span class="nx">request</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span> <span class="p">}</span>

		<span class="nx">CategorieModel</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">_id</span><span class="p">,</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
			<span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">reply</span><span class="p">({</span>
					<span class="na">error</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
					<span class="na">data</span><span class="p">:</span> <span class="nx">error</span><span class="p">,</span>
					<span class="na">statusCode</span><span class="p">:</span> <span class="mi">401</span><span class="p">,</span>
					<span class="na">statusText</span><span class="p">:</span> <span class="dl">'</span><span class="s1">NOK</span><span class="dl">'</span><span class="p">,</span>
				<span class="p">}).</span><span class="nx">code</span><span class="p">(</span><span class="mi">401</span><span class="p">)</span>
			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
				<span class="nx">reply</span><span class="p">({</span>
					<span class="na">error</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
					<span class="na">data</span><span class="p">:</span> <span class="nx">data</span><span class="p">,</span>
					<span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Categoria deletada com sucesso!</span><span class="dl">'</span><span class="p">,</span>
					<span class="na">statusCode</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
					<span class="na">statusText</span><span class="p">:</span> <span class="dl">'</span><span class="s1">OK</span><span class="dl">'</span>
				<span class="p">}).</span><span class="nx">code</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
			<span class="p">}</span>
		<span class="p">})</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>As demais rotas, independente do m√©todo, seguem o mesmo padr√£o da nossa primeira rota, o <code class="highlighter-rouge">GET</code>, uma ou outra coisa que ser√° diferente.</p>

<p>Note que nos m√©todos de <code class="highlighter-rouge">PUT</code>, <code class="highlighter-rouge">DELETE</code> e nosso segundo <code class="highlighter-rouge">GET</code>, o nosso <code class="highlighter-rouge">path</code> est√° diferente. Ele est√° <code class="highlighter-rouge">path: URI + '/{id}'</code>, ou seja, estamos passando o <code class="highlighter-rouge">id</code> como par√¢metro para a nossa requisi√ß√£o. E para ‚Äúpegar‚Äù esse par√¢metro e utiliz√°-lo nas consultas, basta utilizarmos o seguinte recurso <code class="highlighter-rouge">request.params.id</code>.</p>

<p>Visando melhorar cada vez mais nossos c√≥digos e deix√°-lo o mais modularizado poss√≠vel, ainda podemos criar um <code class="highlighter-rouge">helper</code> para as fun√ß√µes que usaremos <code class="highlighter-rouge">reply</code>, de error e sucesso, assim n√£o precisaremos fazer isso em toda rota, basta chamarmos a fun√ß√£o que far√° o resto. Por√©m, n√£o farei isso aqui, deixarei isso como um desafio para voc√™s, caros amiguinhos!</p>

<p>Pronto, temos as rotas de <strong>Categorias</strong> criadas com sucesso, de uma forma simples.</p>

<h3 id="produtos">Produtos</h3>

<p>Agora, s√≥ precisamos criar nossas rotas de <strong>Produtos</strong> que j√° podemos brincar com a nossa API. A l√≥gica √© a mesma que utilizamos na cria√ß√£o das rotas de <strong>Categorias</strong>, ent√£o, ao inv√©s de repetir novamente as explica√ß√µes, segue os c√≥digos das rotas.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">CONSTANTS</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../helpers/constants</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">URI</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">CONSTANTS</span><span class="p">.</span><span class="nx">URI</span><span class="p">}</span><span class="s2">/products`</span>
<span class="kd">const</span> <span class="nx">ProductModel</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">`../models/Product`</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">Moment</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">moment</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">getCurrentDateWithoutTimezone</span> <span class="o">=</span> <span class="nx">Moment</span><span class="p">().</span><span class="nx">format</span><span class="p">(</span><span class="dl">'</span><span class="s1">YYYY-MM-DDTHH:mm:ss</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">[</span>
	<span class="c1">// Get all products</span>
	<span class="p">{</span>
		<span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">,</span>
		<span class="na">path</span><span class="p">:</span> <span class="nx">URI</span><span class="p">,</span>
		<span class="na">handler</span><span class="p">:</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">reply</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
			<span class="nx">ProductModel</span><span class="p">.</span><span class="nx">find</span><span class="p">((</span><span class="nx">error</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
				<span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
					<span class="nx">reply</span><span class="p">({</span>
						<span class="na">error</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
						<span class="na">data</span><span class="p">:</span> <span class="nx">error</span><span class="p">,</span>
						<span class="na">statusCode</span><span class="p">:</span> <span class="mi">401</span><span class="p">,</span>
						<span class="na">statusText</span><span class="p">:</span> <span class="dl">'</span><span class="s1">NOK</span><span class="dl">'</span><span class="p">,</span>
					<span class="p">}).</span><span class="nx">code</span><span class="p">(</span><span class="mi">401</span><span class="p">)</span>
				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
					<span class="nx">reply</span><span class="p">({</span>
						<span class="na">error</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
						<span class="na">data</span><span class="p">:</span> <span class="nx">data</span><span class="p">,</span>
						<span class="na">statusCode</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
						<span class="na">statusText</span><span class="p">:</span> <span class="dl">'</span><span class="s1">OK</span><span class="dl">'</span>
					<span class="p">}).</span><span class="nx">code</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
				<span class="p">}</span>
			<span class="p">})</span>
		<span class="p">}</span>
	<span class="p">},</span>

	<span class="c1">// Get product by id</span>
	<span class="p">{</span>
		<span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">,</span>
		<span class="na">path</span><span class="p">:</span> <span class="nx">URI</span> <span class="o">+</span> <span class="s2">`/{id}`</span><span class="p">,</span>
		<span class="na">handler</span><span class="p">:</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">reply</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
			<span class="nx">ProductModel</span><span class="p">.</span><span class="nx">findById</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
				<span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
					<span class="nx">reply</span><span class="p">({</span>
						<span class="na">error</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
						<span class="na">data</span><span class="p">:</span> <span class="nx">error</span><span class="p">,</span>
						<span class="na">statusCode</span><span class="p">:</span> <span class="mi">401</span><span class="p">,</span>
						<span class="na">statusText</span><span class="p">:</span> <span class="dl">'</span><span class="s1">NOK</span><span class="dl">'</span><span class="p">,</span>
					<span class="p">}).</span><span class="nx">code</span><span class="p">(</span><span class="mi">401</span><span class="p">)</span>
				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
					<span class="nx">reply</span><span class="p">({</span>
						<span class="na">error</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
						<span class="na">data</span><span class="p">:</span> <span class="nx">data</span><span class="p">,</span>
						<span class="na">statusCode</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
						<span class="na">statusText</span><span class="p">:</span> <span class="dl">'</span><span class="s1">OK</span><span class="dl">'</span>
					<span class="p">}).</span><span class="nx">code</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
				<span class="p">}</span>
			<span class="p">})</span>
		<span class="p">}</span>
	<span class="p">},</span>

	<span class="c1">// Create a new product</span>
	<span class="p">{</span>
		<span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span>
		<span class="na">path</span><span class="p">:</span> <span class="nx">URI</span><span class="p">,</span>
		<span class="na">handler</span><span class="p">:</span> <span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">reply</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
			<span class="kd">const</span> <span class="nx">product</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ProductModel</span><span class="p">({</span>
					<span class="na">name</span><span class="p">:</span> <span class="nx">request</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">name</span>
				<span class="p">,</span> <span class="na">id_categorie</span><span class="p">:</span> <span class="nx">request</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">id_categorie</span>
				<span class="p">,</span> <span class="na">price</span><span class="p">:</span> <span class="nx">request</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">price</span>
				<span class="p">,</span> <span class="na">qtd</span><span class="p">:</span> <span class="nx">request</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">qtd</span>
				<span class="p">,</span> <span class="na">status</span><span class="p">:</span> <span class="nx">request</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">status</span>
				<span class="p">,</span> <span class="na">created_at</span><span class="p">:</span> <span class="nx">getCurrentDateWithoutTimezone</span>
			<span class="p">})</span>

			<span class="nx">product</span><span class="p">.</span><span class="nx">save</span><span class="p">((</span><span class="nx">error</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
				<span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
					<span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">.</span><span class="nx">index</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
						<span class="nx">reply</span><span class="p">({</span>
							<span class="na">error</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
							<span class="na">data</span><span class="p">:</span> <span class="dl">'</span><span class="s1">J√° existe um produto registrado com esse nome!</span><span class="dl">'</span><span class="p">,</span>
							<span class="na">statusCode</span><span class="p">:</span> <span class="mi">403</span><span class="p">,</span>
							<span class="na">statusText</span><span class="p">:</span> <span class="dl">'</span><span class="s1">NOK</span><span class="dl">'</span><span class="p">,</span>
						<span class="p">}).</span><span class="nx">code</span><span class="p">(</span><span class="mi">403</span><span class="p">)</span>
					<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
						<span class="nx">reply</span><span class="p">({</span>
							<span class="na">error</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
							<span class="na">data</span><span class="p">:</span> <span class="nx">error</span><span class="p">,</span>
							<span class="na">statusCode</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
							<span class="na">statusText</span><span class="p">:</span> <span class="dl">'</span><span class="s1">NOK</span><span class="dl">'</span><span class="p">,</span>
						<span class="p">})</span>
					<span class="p">}</span>
				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
					<span class="nx">reply</span><span class="p">({</span>
						<span class="na">error</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
						<span class="na">data</span><span class="p">:</span> <span class="nx">data</span><span class="p">,</span>
						<span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Novo produto cadastrado com sucesso!</span><span class="dl">'</span><span class="p">,</span>
						<span class="na">statusCode</span><span class="p">:</span> <span class="mi">201</span><span class="p">,</span>
						<span class="na">statusText</span><span class="p">:</span> <span class="dl">'</span><span class="s1">OK</span><span class="dl">'</span>
					<span class="p">}).</span><span class="nx">code</span><span class="p">(</span><span class="mi">201</span><span class="p">)</span>
				<span class="p">}</span>
			<span class="p">})</span>
		<span class="p">}</span>
	<span class="p">},</span>

	<span class="c1">// Update a product by id</span>
	<span class="p">{</span>
		<span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">PUT</span><span class="dl">'</span><span class="p">,</span>
		<span class="na">path</span><span class="p">:</span> <span class="nx">URI</span> <span class="o">+</span> <span class="s2">`/{id}`</span><span class="p">,</span>
		<span class="na">handler</span><span class="p">:</span> <span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">reply</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
			<span class="kd">const</span> <span class="nx">_id</span> <span class="o">=</span> <span class="p">{</span> <span class="na">_id</span><span class="p">:</span> <span class="nx">request</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span> <span class="p">}</span>

			<span class="kd">const</span> <span class="nx">product</span> <span class="o">=</span> <span class="p">{</span>
					<span class="na">name</span><span class="p">:</span> <span class="nx">request</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">name</span>
				<span class="p">,</span> <span class="na">id_categorie</span><span class="p">:</span> <span class="nx">request</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">id_categorie</span>
				<span class="p">,</span> <span class="na">price</span><span class="p">:</span> <span class="nx">request</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">price</span>
				<span class="p">,</span> <span class="na">qtd</span><span class="p">:</span> <span class="nx">request</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">qtd</span>
				<span class="p">,</span> <span class="na">status</span><span class="p">:</span> <span class="nx">request</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">status</span>
				<span class="p">,</span> <span class="na">updated_at</span><span class="p">:</span> <span class="nx">getCurrentDateWithoutTimezone</span>
			<span class="p">}</span>

			<span class="nx">ProductModel</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">_id</span><span class="p">,</span> <span class="nx">product</span><span class="p">,</span> <span class="p">{</span> <span class="na">multi</span><span class="p">:</span> <span class="kc">false</span> <span class="p">},</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
				<span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
					<span class="nx">reply</span><span class="p">({</span>
						<span class="na">error</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
						<span class="na">data</span><span class="p">:</span> <span class="nx">error</span><span class="p">,</span>
						<span class="na">statusCode</span><span class="p">:</span> <span class="mi">401</span><span class="p">,</span>
						<span class="na">statusText</span><span class="p">:</span> <span class="dl">'</span><span class="s1">NOK</span><span class="dl">'</span><span class="p">,</span>
					<span class="p">}).</span><span class="nx">code</span><span class="p">(</span><span class="mi">401</span><span class="p">)</span>
				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
					<span class="nx">reply</span><span class="p">({</span>
						<span class="na">error</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
						<span class="na">data</span><span class="p">:</span> <span class="nx">data</span><span class="p">,</span>
						<span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Produto editado com sucesso!</span><span class="dl">'</span><span class="p">,</span>
						<span class="na">statusCode</span><span class="p">:</span> <span class="mi">204</span><span class="p">,</span>
						<span class="na">statusText</span><span class="p">:</span> <span class="dl">'</span><span class="s1">OK</span><span class="dl">'</span>
					<span class="p">}).</span><span class="nx">code</span><span class="p">(</span><span class="mi">204</span><span class="p">)</span>
				<span class="p">}</span>
			<span class="p">})</span>
		<span class="p">}</span>
	<span class="p">},</span>

	<span class="c1">// Delete a product by id</span>
	<span class="p">{</span>
		<span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">DELETE</span><span class="dl">'</span><span class="p">,</span>
		<span class="na">path</span><span class="p">:</span> <span class="nx">URI</span> <span class="o">+</span> <span class="s2">`/{id}`</span><span class="p">,</span>
		<span class="na">handler</span><span class="p">:</span> <span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">reply</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
			<span class="kd">const</span> <span class="nx">_id</span> <span class="o">=</span> <span class="p">{</span> <span class="na">_id</span><span class="p">:</span> <span class="nx">request</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span> <span class="p">}</span>

			<span class="nx">ProductModel</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">_id</span><span class="p">,</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
				<span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
					<span class="nx">reply</span><span class="p">({</span>
						<span class="na">error</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
						<span class="na">data</span><span class="p">:</span> <span class="nx">error</span><span class="p">,</span>
						<span class="na">statusCode</span><span class="p">:</span> <span class="mi">401</span><span class="p">,</span>
						<span class="na">statusText</span><span class="p">:</span> <span class="dl">'</span><span class="s1">NOK</span><span class="dl">'</span><span class="p">,</span>
					<span class="p">}).</span><span class="nx">code</span><span class="p">(</span><span class="mi">401</span><span class="p">)</span>
				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
					<span class="nx">reply</span><span class="p">({</span>
						<span class="na">error</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
						<span class="na">data</span><span class="p">:</span> <span class="nx">data</span><span class="p">,</span>
						<span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Produto deletado com sucesso!</span><span class="dl">'</span><span class="p">,</span>
						<span class="na">statusCode</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
						<span class="na">statusText</span><span class="p">:</span> <span class="dl">'</span><span class="s1">OK</span><span class="dl">'</span>
					<span class="p">}).</span><span class="nx">code</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
				<span class="p">}</span>
			<span class="p">})</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">]</span>
</code></pre></div></div>

<h2 id="efetuando-testes-locais-com-postman">Efetuando testes locais com Postman</h2>

<p>Agora sim, temos uma API pronta para testarmos. Se executarmos no terminal o comando <code class="highlighter-rouge">nodemon app.js</code>, j√° estando com o servi√ßo do <code class="highlighter-rouge">mongod</code> em execu√ß√£o, teremos o seguinte resultado:</p>

<p><img src="/assets/img/nodemon_app_ecommerce_api.png" alt="Imagem do terminal executando e levantando o servidor" /></p>

<p>Vamos ent√£o, utilizar o Postman para efetuarmos testes em nossas rotas, que criamos acima:</p>

<p><img src="/assets/img/get_all_categories_ecommerce_api.png" alt="Exemplo de GET Categorias via Postman" /></p>

<p>No exemplo acima, estamos fazendo um <code class="highlighter-rouge">GET</code> para retornar todas as categorias cadastradas em nosso banco de dados. Vamos verificar agora, como ficaria um <code class="highlighter-rouge">POST</code> para criarmos uma nova categoria.</p>

<p><img src="/assets/img/post_categorie_erro_ecommerce_api.png" alt="Exemplo de POST Categorias com registro duplicado via Postman" /></p>

<p>Vale a pena ressaltar aqui, que, tanto em <code class="highlighter-rouge">POST</code> e/ou <code class="highlighter-rouge">PUT</code> podemos enviar o <em>body</em> como um <code class="highlighter-rouge">form-data</code> ou <code class="highlighter-rouge">json</code> atrav√©s do <em>raw</em>.</p>

<p>No exemplo desse <code class="highlighter-rouge">POST</code> estamos enviando uma nova categoria com o mesmo nome de uma j√° existente em nosso banco de dados. E, como definimos em nosso model l√° no √≠nicio o nome √© <code class="highlighter-rouge">unique: true</code>, ou seja, dever√° ser √∫nico. Por isso, como j√° tratamos isso em nossas rotas, ele devolve uma mensagem amig√°vel ao inv√©s do erro gigantesco do banco. J√° o campo <code class="highlighter-rouge">status</code> √© do tipo <code class="highlighter-rouge">Boolean</code>, nele declaramos 1 para categorias <strong>ativadas</strong> e 0 para categorias <strong>desativadas</strong>.</p>

<p>Esses erros, como o de registro duplicado, poderiamos muito bem tratar com o Mongoose, atrav√©s de suas valida√ß√µes e tudo mais. Por√©m, penso que dessa forma perderiamos em performance na nossa API, ent√£o j√° tratamos dela na pr√≥pria API. Isso vai de desenvolvedor para desenvolvedor, se voc√™ preferir tratar os erros atrav√©s do Mongoose, ok, sem problemas. Continuemos..</p>

<p>Mas e como ficaria um <code class="highlighter-rouge">POST</code> sem erros? B√¢mo v√™..</p>

<p><img src="/assets/img/post_categorie_ecommerce_api.png" alt="Exemplo de POST Categorias via Postman" /></p>

<p>J√° o <code class="highlighter-rouge">PUT</code> ficaria da seguinte forma:</p>

<p><img src="/assets/img/put_categorie_ecommerce_api.png" alt="Exemplo de PUT Categorias via Postman" /></p>

<p>O <code class="highlighter-rouge">GET</code> <em>by id</em> e <code class="highlighter-rouge">DELETE</code> basta passar na URL da requisi√ß√£o o <code class="highlighter-rouge">_id</code> da categoria desejada que ir√° retornar os da categoria ou deletar a mesma, respectivamente.</p>

<p><img src="/assets/img/get_by_id_categorie_ecommerce_api.png" alt="Exemplo de GET by id Categorias via Postman" /></p>

<p><img src="/assets/img/delete_categorie_ecommerce_api.png" alt="Exemplo de DELETE Categorias via Postman" /></p>

<h2 id="concluindo">Concluindo</h2>

<p>Prontinho, temos nossa API desenvolvida com Hapi.js e MongoDB para consumirmos em um aplicativo web e/ou mobile. Agora, voc√™ pode realizar o <em>deploy</em> para produ√ß√£o no Heroku, DigitalOcean, AWS, Google Cloud, <em>whatever</em>, que ir√° funcionar perfeitamente.</p>

<p>Desenvolvemos uma API simples, aplicando os conceitos mais b√°sicos do Hapi.js, por√©m conceitos importantes que te deixar√° preparado para desenvolver APIs de mais simples √† robustas e copmlexas com Hapi.js e MongoDB.</p>

<p>O artigo em si ficou um pouco extenso, por√©m deu para mostrar a voc√™s a ideia de trabalharmos com essa belezinha do Hapi.js. Tem coisas nesses c√≥digos que ainda podemos melhorar, modularizar mais algumas coisinhas, criar mais alguns <em>helpers</em>, etc. Agora √© com voc√™, de desenvolver uma API com Hapi.js e MongoDB.</p>

<p>Todos os c√≥digos que utilizei nesse artigo pode ser encontrado <a href="https://github.com/ednilsonamaral/vuejs-ecommerce-api">nesse reposit√≥rio</a> no GitHub. Se voc√™s gostaram, d√™em um star, fiquem √† vontade para sugerir melhorias de c√≥digos, PRs s√£o aceitos! Tamb√©m, j√° publiquei essa API no Heroku e o banco de dados na MLab.</p>

<p>N√£o perca tempo, comece a usar voc√™ tamb√©m o Hapi.js e nos conte como foi a experi√™ncia. Caso tenha alguma d√∫vida, sugest√£o, reclama√ß√£o, please, entre em contato comigo, atrav√©s de um simples coment√°rio ou via redes sociais. Se gostou ou n√£o, compartilhe com seus amiguinhos desenvolvedores! =p</p>

<p>√â isso a√≠ pessoal, vaaleu, at√© mais! =D</p>

<h2 id="refer√™ncias-e-links-importantes">Refer√™ncias e Links importantes</h2>

<p><a href="https://hapijs.com/tutorials?lang=pt_BR">- Documenta√ß√£o oficial do Hapi.js em PT-BR</a><br />
<a href="https://github.com/ednilsonamaral/vuejs-ecommerce-api">- Reposit√≥rio oficial com todos os c√≥digos</a></p>
:ET